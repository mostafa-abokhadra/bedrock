openapi: 3.0.0
info:
  title: Bedrock APIs
  version: 1.0.0

servers:
  - url: http://localhost:8080
  - url: https://bedrock-henna.vercel.app

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:

    SignupRequest:
      type: object
      properties:
        email:
          type: string
          example: mostafa@example.com
        password:
          type: string
          example: strongPassword1#
        confirmPassword:
          type: string
          example: strongPassword1#
      required:
        - email
        - password
        - confirmPassword

    SignupOkResponse:
      type: object
      properties:
        message:
          type: string
          example: User Created Successfully
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          example: mostafa@example.com

    SignupBadRequestResponse1:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              msg:
                type: string
                example: invalide Emali address
              path:
                type: string
                example: email
              location:
                type: string
                example: body
              type:
                type: string
                example: field
              value:
                type: string
                example: yourInvalideEmailValue@example.com

    SignupBadRequestResponse2:
      type: object
      properties:
        message:
          type: string
          example: Can't Create User
        errors:
          type: string
          example: unknown prisma error
        somethingElss:
          type: string
          example: maybe

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: validRegisteredEmail@example.com
        password:
          type: string
          example: yourStrongPassword123#
      required:
        - email
        - password

    LoginOkResponse:
      type: object
      properties:
        message:
          type: string
          example: User logged in successfully
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          example: validRegisteredEmail@example.com

    AlreadyAuthenticated:
      type: object
      properties:
        message:
          type: string
          example: Already Authenticated
      required:
        - message
    isAuthenticated:
      type: object
      properties:
        message:
          type: string
          example: User Not Authenticated


# security:
#   - BasicAuth:  []
# this global, override it in signup and login byt sercurity: [] at path level
paths:
  /auth/signup:
    post:
      tags:
        - User Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupOkResponse'
        400:
          description: invalid user input
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: "#/components/schemas/SignupBadRequestResponse1"
                  - $ref: "#/components/schemas/SignupBadRequestResponse2"
  /auth/login:
    post:
      tags:
        - User Authentication
      summary: Login the user in and creating a new session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: successfull login attempt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginOkResponse'



# // Bearer: {
# //     type: 'http',
# //     schema: "bearer",
# //     bearFormat: "JWT",
# //     description: "basic auth"
# // },
# apiKeyAuth: {
# type: 'apiKey',
# in: 'header',
# name: 'google-api-key',
# description: 'auth with google'
# }